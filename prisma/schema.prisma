datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  password      String?

  accounts      Account[]
  sessions      Session[]
  communities   Community[]
  subscriptions Subscriber[]
  likes         Like[]
  posts         Post[]
}

model Community {
  id         String   @id @default(cuid())
  name       String
  totalViews Int
  creator    User     @relation(fields: [creatorId], references: [id])
  creatorId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  subscribers Subscriber[]
  posts       Post[]
  tags        Tags[]

  @@index([creatorId])
}

model Subscriber {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  community   Community @relation(fields: [communityId], references: [id])
  communityId String

  @@index([userId])
  @@index([communityId])
}

model Post {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   Json?
  views     Int

  community   Community @relation(fields: [communityId], references: [id])
  communityId String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  likes Like[]

  @@index([communityId])
  @@index([authorId])
}

model Tags {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  communities Community @relation(fields: [communityId], references: [id])
  communityId String

  @@index([communityId])
}

model Like {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String

  @@index([userId])
  @@index([postId])
}
