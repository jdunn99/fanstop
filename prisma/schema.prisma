datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  password      String?

  accounts      Account[]
  sessions      Session[]
  community     Community?
  subscriptions Subscriber[]
  likes         Likes[]
  posts         Post[]
  comments      Comment[]
}

model Community {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  creator     User     @relation(fields: [creatorId], references: [id])
  creatorId   String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String

  subscribers Subscriber[]
  posts       Post[]
  tags        Tags[]

  @@index([creatorId])
}

model Subscriber {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  community   Community @relation(fields: [communityId], references: [id])
  communityId String

  @@index([userId])
  @@index([communityId])
}

model Post {
  id              String   @id @default(cuid())
  title           String   @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  content         Json?
  views           Int      @default(0)
  image           String?
  description     String?  @db.Text
  isPublished     Boolean  @default(false)
  subscribersOnly Boolean  @default(false)
  commentsVisible Boolean  @default(true)

  community   Community @relation(fields: [communityId], references: [id])
  communityId String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  likes    Likes[]
  comments Comment[]

  @@index([communityId])
  @@index([authorId])
}

model Tags {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  communities Community[]
}

model Likes {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String

  @@index([userId])
  @@index([postId])
}

model Comment {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([postId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
