datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  password      String?
  sequence      Int       @unique @default(autoincrement())

  accounts              Account[]
  sessions              Session[]
  community             Community?
  subscriptions         Subscriber[]
  likes                 Likes[]
  posts                 Post[]
  comments              Comment[]
  messages              Message[]
  conversations         Conversation[]
  createdNotifications  Notification[] @relation(name: "CreatedNotifications")
  receivedNotifications Notification[] @relation(name: "ReceivedNotifications")
}

model Community {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  creator     User     @relation(fields: [creatorId], references: [id])
  creatorId   String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String
  image       String?
  sequence    Int      @unique @default(autoincrement())

  subscribers Subscriber[]
  posts       Post[]
  tags        Tags[]
  facebook    String?
  instagram   String?
  website     String?
  twitter     String?
  youtube     String?
  tiktok      String?
  groups      Group[]

  @@index([creatorId])
}

model Subscriber {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  community   Community @relation(fields: [communityId], references: [id])
  communityId String
  sequence    Int       @unique @default(autoincrement())

  @@index([userId])
  @@index([communityId])
}

model Post {
  id              String   @id @default(cuid())
  title           String   @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  content         Json?
  views           Int      @default(0)
  image           String?
  description     String?  @db.Text
  isPublished     Boolean  @default(false)
  subscribersOnly Boolean  @default(false)
  commentsVisible Boolean  @default(true)
  sequence        Int      @unique @default(autoincrement())

  community   Community @relation(fields: [communityId], references: [id])
  communityId String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  group   Group?  @relation(fields: [groupId], references: [id])
  groupId String?

  likes    Likes[]
  comments Comment[]

  @@index([communityId])
  @@index([authorId])
  @@index([groupId])
}

model Tags {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  communities Community[]
}

model Likes {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
  sequence  Int      @unique @default(autoincrement())

  @@index([userId])
  @@index([postId])
}

model Comment {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sequence  Int      @unique @default(autoincrement())

  @@index([userId])
  @@index([postId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Conversation {
  id        String    @id @default(cuid())
  users     User[]
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  sequence  Int       @unique @default(autoincrement())
}

model Message {
  id           String       @id @default(cuid())
  content      String
  user         User         @relation(fields: [userId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  conversationId String
  sequence       Int      @unique @default(autoincrement())

  @@index([userId])
  @@index([conversationId])
}

model Notification {
  id         String   @id @default(cuid())
  creator    User     @relation(name: "CreatedNotifications", fields: [creatorId], references: [id])
  receiver   User     @relation(name: "ReceivedNotifications", fields: [receiverId], references: [id])
  path       String
  message    String
  creatorId  String
  receiverId String
  createdAt  DateTime @default(now())
  sequence   Int      @unique @default(autoincrement())

  @@index([creatorId])
  @@index([receiverId])
}

model Group {
  id          String    @id @default(cuid())
  name        String    @unique
  description String
  image       String?
  sequence    Int       @unique @default(autoincrement())
  posts       Post[]
  community   Community @relation(fields: [communityId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  communityId String

  @@index([communityId])
}
